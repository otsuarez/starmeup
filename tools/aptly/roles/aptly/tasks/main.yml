---

- name: check if aptly is installed
  command: dpkg -s aptly
  register: pkg

- name: Add aptly repository
  apt_repository: repo="{{ aptly_pkg.repo }}" state=present
  sudo: yes
  when: pkg.rc == 1 
#"

- name: Add aptly gpg key repository
  apt_key: data="{{ lookup ('file','files/aptly-repo.key') }}" state=present
  sudo: yes
  when: pkg.rc == 1 
#"
- name: Update repositories cache and install aptly package
  apt: name=aptly update_cache=yes
  sudo: yes
  when: pkg.rc == 1 

- name: create aptly repository directory exists
  file: path={{ web_dir }}/aptly  state=directory   owner={{ deploy_user }} group={{ deploy_group }} recurse=yes
  sudo: yes
  when: pkg.rc == 1 

- name: create aptly lib directory 
  file: path={{ lib_dir }}/aptly  state=directory  owner={{ deploy_user }} group={{ deploy_group }} recurse=yes
  sudo: yes
  when: pkg.rc == 1 

- name: create aptly conf file 
  copy: src=files/aptly.conf dest=/etc/aptly.conf force=no backup=yes
  sudo: yes
  when: pkg.rc == 1 

- name: check gpg keys
  command: gpg --list-keys
  sudo_user: "{{ deploy_user }}"
  when: pkg.rc == 1 
  register: gout
#- debug: var=gout

- name: import repo gpg private key
  shell: echo "{{ lookup('file', '../files/RLS-TEAM-GPG-KEY.private') }}" | gpg --import -
  sudo_user: "{{ deploy_user }}"
  when: pkg.rc == 1 

- name: list existing repos
  command: aptly repo -raw=true list
  register: aptly_repos

- name: list existing debian repositories
  command: aptly publish list -raw
  register: aptly_published

#- debug: var=aptly_repos - debug: var=aptly_published

#- debug: var=aptly.repositories
# aptly repo create -architectures="noarch,i386,amd64" -comment="${REPO} Environment Repository" -component="acme" -distribution="${DISTRIBUTION}" ${REPO}
- name: aptly repo
  command: aptly repo create -architectures="{{ item.architectures }}" -component="{{ item.component }}" -comment="{{ item.comment }}" -distribution="{{ item.distribution }}" {{ item.repo }}
#"
  when:  item.repo not in aptly_repos.stdout
  with_items: aptly.repos

#aptly publish -architectures="amd64,i386,noarch" repo ${REPO} ${REPO}
- name: aptly publish
  command: aptly publish -architectures="{{ item.architectures }}" repo {{ item.repo }} {{ item.endpoint_prefix }}
#"
  when:  item.repo  not in aptly_published.stdout
  with_items: aptly.publish

# for publishing packages, update the published repo:
# aptly publish update {{ item.distribution }} {{ item.repo }}
# with_items: aptly.repos

