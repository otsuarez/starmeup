---
- name: git - Check if repo exists
  stat: path={{ git_dir }}/{{ component_git_uri }}
  register: check_path

# cloning the repository

- name: setup-git creating parent git repository directory if required
  file: path={{ git_dir }} state=directory owner={{ deploy_user }} recurse=yes
  sudo: yes
  when: check_path.stat.exists == false

- name: setup-git - git clone the repository
  command: >
   git clone {{ input_url }}/{{ component_git_uri }}.git
   chdir={{ git_dir }}
  when: check_path.stat.exists == false

- name: setup-git - add support for encryption if required
  command: >
   {{ git_crypt_cmd }} init {{ git_crypt_key_file }}
   removes={{ git_dir }}/{{ component_git_uri }}/.gitattributes
   chdir={{ git_dir }}/{{ component_git_uri }}
  when: check_path.stat.exists == false

# checkout the code

- name: git - git fetch
  command: >
   git fetch -a
   chdir={{ git_dir }}/{{ component_git_uri }}

- name: git - git checkout
  command: >
   git checkout {{ branch }}
   chdir={{ git_dir }}/{{ component_git_uri }}

- name: git - git pull origin
  command: >
   git pull origin {{ branch }}
   chdir={{ git_dir }}/{{ component_git_uri }}

- name: git - checkout the hash
  git: >
   repo={{ input_url }}/{{ component_git_uri }}.git
   dest={{ git_dir }}/{{ component_git_uri }}
   version={{ sha }}
   accept_hostkey=yes
  register: result

- name: create deployment dir
  file: path={{ pkg_tmp_dir }}/{{ component }}/src/{{ base_prefix }}/{{ component_deploy_dir }}/ state=directory owner={{ deploy_user }} recurse=yes

- name: command rsync
  command: rsync -ar  --inplace --exclude "/.git/*" --exclude ".gitignore" --exclude ".gitattributes" --exclude ".git*"  {{ git_dir }}/{{ component_git_uri }}/ {{ pkg_tmp_dir }}/{{ component }}/src/{{ base_prefix }}/{{ component_deploy_dir }}/
