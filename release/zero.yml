---
- name: define server pool
  hosts: nms
  gather_facts: false
  tasks:
  - name: get commmon name from  package name
    set_fact: common_name_var={{ packages[0].name |  regex_replace('-', '_') |  regex_replace('^acme_', '')  | regex_replace('(.*?)\_.*$', '\\1') }}
    always_run: yes
    tags: ['rollback','canary']
  - name: get component from package name
    set_fact: pkg_name_var={{ packages[0].name |  regex_replace('^acme-', '')  }}
    always_run: yes
    tags: ['rollback','canary']

  - name: include component variables from common
    include_vars: "{{ environment_name }}/group_vars/common-{{  common_name_var }}"
    always_run: yes
    tags: ['rollback','canary']
  - name: include component variables
    include_vars: "{{ environment_name }}/group_vars/{{  pkg_name_var }}"
    always_run: yes
    tags: ['rollback','canary']

  # put together deploy group
  - add_host: name={{ item }} groups=deploy_group
    with_items:
     - "{{ groups[pool_name][0] }}"
    always_run: yes
    tags: ['canary']

  - add_host: name={{ item }} groups=deploy_group
    with_items:
     - "{{ groups[pool_name] }}"
    always_run: yes

 #####   ######  #####   #        ####    #   #
 #    #  #       #    #  #       #    #    # #
 #    #  #####   #    #  #       #    #     #
 #    #  #       #####   #       #    #     #
 #    #  #       #       #       #    #     #
 #####   ######  #       ######   ####      #


- hosts: deploy_group
  #gather_facts: false
  serial: 1
  vars:
    - install_required: False
  #pre_tasks:
  #- name: update repo
  #  command: apt-get update -o Dir::Etc::sourcelist="sources.list.d/{{ item }}.list" -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0"
  #  sudo: yes
  #  with_items:
  #    - "Jenkins-Native-Packages" 
  #    - "Jenkins-Native-Packages-conf"

  pre_tasks:
  - name: get current packages version
    shell: dpkg -l | grep {{ item.name }} | awk '{print $3}'
    with_items: packages
    when: item.version is defined
    changed_when: False
    register: pre_pkg_vers
    tags: ['rollback','canary']

  #- debug: var=pre_pkg_vers.results
  #  tags: ['rollback','canary']

  - name: check if install is required
    set_fact: 
      install_required: True
    with_items: pre_pkg_vers.results
    when: item.item.version is defined and item.item.version != item.stdout
    changed_when: False
    tags: ['rollback','canary']

  - name: install required if installing latest
    set_fact: 
      install_required: True
    when: item.version is not defined
    with_items: packages
    tags: ['canary']


  #- name: tell
  #  debug: msg="install required"
  #  when: install_required

  roles:
    #- { role: release, when: install_required, tags: ['rollback','canary'] }
    - { role: release, when: install_required }

  post_tasks:
  - hipchat_v2: msg="{{ environment_name }} {{ inventory_hostname }} {{ packages[0].name }} {{ latest.results[0].stdout }}"  color="{{ pkg_hipchat_color }}" room="{{ pkg_hipchat_room }}" token="{{ pkg_hipchat_token }}"
    #"
    changed_when: False
    when: False
    with_items: packages
    tags: ['rollback','canary']

  - name: get installed packages version
    shell: dpkg -s {{ item.name }} | grep Version  | awk '{print $2}'
    with_items: packages
    changed_when: False
    register: installed_pkg_vers
    tags: ['rollback','canary']

  - debug: msg="{{ environment_name }} {{ inventory_hostname }} {{ item.item.name }} {{ item.stdout}}"
    #"
    with_items: installed_pkg_vers.results
    tags: ['rollback','canary']

